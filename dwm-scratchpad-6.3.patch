diff --git a/dwm.c b/dwm.c
index e5efb6a..2465870 100644
--- a/dwm.c
+++ b/dwm.c
@@ -212,6 +212,7 @@ static void tagmon(const Arg *arg);
 static void tile(Monitor *m);
 static void togglebar(const Arg *arg);
 static void togglefloating(const Arg *arg);
+static void togglescratch(const Arg *arg);
 static void toggletag(const Arg *arg);
 static void toggleview(const Arg *arg);
 static void unfocus(Client *c, int setfocus);
@@ -272,6 +273,8 @@ static Window root, wmcheckwin;
 /* configuration, allows nested code to access above variables */
 #include "config.h"
 
+static unsigned int scratchtag = 1 << LENGTH(tags);
+
 /* compile-time check if all tags fit into an unsigned int bit array. */
 struct NumTags { char limitexceeded[LENGTH(tags) > 31 ? -1 : 1]; };
 
@@ -1052,6 +1055,14 @@ manage(Window w, XWindowAttributes *wa)
 	c->y = MAX(c->y, c->mon->wy);
 	c->bw = borderpx;
 
+	selmon->tagset[selmon->seltags] &= ~scratchtag;
+	if (!strcmp(c->name, scratchpadname)) {
+	  c->mon->tagset[c->mon->seltags] |= c->tags = scratchtag;
+	  c->isfloating = True;
+	  c->x = c->mon->wx + (c->mon->ww / 2 - WIDTH(c) / 2);
+	  c->y = c->mon->wy + (c->mon->wh / 2 - HEIGHT(c) / 2);
+	}
+
 	wc.border_width = c->bw;
 	XConfigureWindow(dpy, w, CWBorderWidth, &wc);
 	XSetWindowBorder(dpy, w, scheme[SchemeNorm][ColBorder].pixel);
@@ -1639,6 +1650,7 @@ sigchld(int unused)
 void
 spawn(const Arg *arg)
 {
+	selmon->tagset[selmon->seltags] &= ~scratchtag;
 	if (fork() == 0) {
 		if (dpy)
 			close(ConnectionNumber(dpy));
@@ -1717,6 +1729,29 @@ togglefloating(const Arg *arg)
 	arrange(selmon);
 }
 
+void
+togglescratch(const Arg *arg)
+{
+       Client *c;
+       unsigned int found = 0;
+
+       for (c = selmon->clients; c && !(found = c->tags & scratchtag); c = c->next);
+       if (found) {
+               unsigned int newtagset = selmon->tagset[selmon->seltags] ^ scratchtag;
+               if (newtagset) {
+                       selmon->tagset[selmon->seltags] = newtagset;
+                       focus(NULL);
+                       arrange(selmon);
+               }
+               if (ISVISIBLE(c)) {
+                       focus(c);
+                       restack(selmon);
+               }
+       } else
+               spawn(arg);
+}
+
+
 void
 toggletag(const Arg *arg)
 {
